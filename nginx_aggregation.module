<?php
/**
 * @file   nginx_aggregation.module
 * @author AntÃ³nio P. P. Almeida <appa@perusio.net>
 * @date   Mon Dec 12 02:08:20 2011
 *
 * @brief Implements JS and CSS file aggregation using Nginx HTTP concat
 *        module.
 */

// The prefix for switching HTTP concatenation on.
define('NGINX_AGGREGATION_PREFIX', '??');
// The OS page size. We try to get it when installing the module on
// hook_install(). If we cannot get it we use this value as a fallback.
define('OS_PAGE_SIZE', 4096);
// The link to the Nginx HTTP concat module.
define('URI_NGINX_HTTP_CONCAT', 'https://github.com/perusio/nginx-http-concat');

/**
 * Implements hook_help().
 */
function nginx_aggregation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nginx_aggregation':
      return t('Aggregates all CSS and JS files using @nginx_http_concat_module module. Circumvents core aggregation.', array('@nginx_http_concat_module' => l('Nginx HTTP Concat', URI_NGINX_HTTP_CONCAT)));
  }
} // nginx_aggregation_help

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nginx_aggregation_form_system_performance_settings_alter(&$form, &$form_state) {

  // Add new information to the description of CSS preprocessing..
  $form['bandwidth_optimizations']['preprocess_css']['#description'] .= t('If using Nginx CSS aggregation you should <em>disable</em> this setting.');
  // Check to see if core CSS aggregation is on. If it is signal the user.
  if (isset($form['bandwidth_optimizations']['preprocess_css']['#options'][1])) {
    drupal_set_message(t('There is no point in having core CSS aggregation enabled if using Nginx HTTP concat aggregation.'), 'warning');
  }
  // Check to see if core CSS aggregation is on. If it is signal the user.
  if (isset($form['bandwidth_optimizations']['preprocess_css']['#options'][1])) {
    drupal_set_message(t('There is no point in having core CSS aggregation enabled if using Nginx HTTP concat aggregation.'), 'warning');
  }
  // Move the CSS preprocess form below.
  $form['bandwidth_optimizations']['preprocess_css']['#weight'] = 2;
  // Nginx aggregation CSS settings.
  $form['bandwidth_optimizations']['nginx_aggregation_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('@nginx_http_concat_module CSS aggregation.', array('@nginx_http_concat_module' => l('Nginx HTTP Concat', URI_NGINX_HTTP_CONCAT))),
    '#description' => t('Use @nginx_http_concat_module for aggregating CSS files. Circumvents all core aggregation.', array('@nginx_http_concat_module' => l('Nginx HTTP Concat', URI_NGINX_HTTP_CONCAT))),
    '#default_value' => variable_get('nginx_aggregation_css', 0),
    'weight' => 1,
  );

  // New setting for Nginx JS aggregation.
  $form['bandwidth_optimizations']['preprocess_js']['#description'] .= t('If using Nginx JS aggregation you should <em>disable</em> this setting.');
  // Check to see if core JS aggregation is on. If it is signal the user.
  if (isset($form['bandwidth_optimizations']['preprocess_js']['#options'][1])) {
    drupal_set_message(t('There is no point in having core JS aggregation enabled if using Nginx HTTP concat aggregation.'), 'warning');
  }
  // Move the JS preprocess form below.
  $form['bandwidth_optimizations']['preprocess_js']['#weight'] = 2;

  $form['bandwidth_optimizations']['nginx_aggregation_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('@nginx_http_concat_module JS aggregation.', array('@nginx_http_concat_module' => l('Nginx HTTP Concat', URI_NGINX_HTTP_CONCAT))),
    '#description' => t('Use @nginx_http_concat_module for aggregating JS files. Circumvents all core aggregation.', array('@nginx_http_concat_module' => l('Nginx HTTP Concat', URI_NGINX_HTTP_CONCAT))),
    '#default_value' => variable_get('nginx_aggregation_js', 0),
    'weight' => 1,
  );

} // nginx_aggregation_form_system_performance_settings_alter

/**
 * Implements hook_theme_registry_alter().
 *
 * Make nginx_aggregation's page preprocess function run last.
 */
function nginx_aggregation_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page'])) {
    // If nginx_aggregation's preprocess function is there already, remove it.
    if (is_array($theme_registry['page']['preprocess functions'])
        &&
        $key = array_search('nginx_aggregation_preprocess_page',
                            $theme_registry['page']['preprocess functions'])) {
      unset($theme_registry['page']['preprocess functions'][$key]);
    }
    // Place it at the end.
    $theme_registry['page']['preprocess functions'][] = 'nginx_aggregation_preprocess_page';
  }
} // nginx_aggregation_theme_registry_alter

/**
 * Implements hook_preprocess_hook().
 *
 * Concatenate all CSS files using Nginx HTTP concat.
 */
function nginx_aggregation_preprocess_page(&$vars) {
  // Only do this for pages that have CSS on them.
  if (!empty($vars['styles'])) {
    // If CSS Optimization is enabled bail out right away.
    if (variable_get('preprocess_css', 0)) {
      break;
    }
    // Otherwise we proceed for aggregation.
    else {
      $nginx_css_agg = nginx_aggregation_concat_css_files($vars['css']);
      // It might happen that we exceed the maximum allowed string size
      if ($nginx_css_agg) {
        $vars['styles'] = $nginx_css_agg;
      }
    }
  } // css done

  // Only do this for pages that have JS on them.
  if (!empty($vars['scripts'])) {
    // If CSS Optimization is enabled bail out right away.
    if (variable_get('preprocess_js', 0)) {
      break;
    }
    // Otherwise we proceed for aggregation.
    else { // First we do the header.
      $nginx_js_agg_header = nginx_aggregation_concat_js_files(drupal_add_js(NULL, NULL, 'header'));
      // It might happen that we exceed the maximum allowed string size
      if ($nginx_js_agg_header) {
        $vars['scripts'] = $nginx_js_agg_header;
      }
    }
  } // js done
} // nginx_aggregation_preprocess_page

/**
 * Implements theme_closure().
 *
 * Concatenate all Javascript in the footer.
 */
function phptemplate_closure($main = 0) {
  // Grab all hook_footer() stuff.
  $footer = module_invoke_all('footer', $main);
  // Perform the concatenation.
  $nginx_js_agg_footer = nginx_aggregation_concat_js_files(drupal_add_js(NULL, NULL, 'footer'));
  // If were successful add the JS to the footer.
  if ($nginx_js_agg_footer) {
    return implode("\n", $footer) . $nginx_js_agg_footer;
  }
} // phptemplate_closure

/**
 * Builds the string with all the CSS files to be added to a given page.
 *
 * @param array $css_files
 *   The array of CSS files.
 *
 * @return string or boolean
 *   The string with all the CSS to be added for each media type or FALSE if
 *   we go beyond the maximum allowed string size.
 */
function nginx_aggregation_concat_css_files($css_files) {

  if (empty($css_files)) {
    return FALSE;
  }

  // The string with all styles.
  $nginx_aggregation_styles = '';
  // The array where all media types styles are stored.
  $css_media_styles = array();
  // Loop over all matched file URIs.
  foreach($css_files as $media_type => $context_array) {
    $types_styles = array();
    foreach ($context_array as $file => $css) {
      $types_styles = array_merge($types_styles, array_keys($css));
    }
    // Implode the array so that we get a proper comma separated string of
    // file names.
    $css_media_styles[$media_type] = NGINX_AGGREGATION_PREFIX . implode(',', $types_styles);
    // Get the maximum length of the resulting string. Bailout if is greater
    // than the OS page size.
    $string_size = strlen($css_media_styles[$media_type]);
    if ($string_size > variable_get('nginx_aggregation_max_length', OS_PAGE_SIZE)) {
      drupal_set_message(
        t('CSS concatenated string is %strsize. Larger then the @max maximum allowed.' ,
          array('%strsize' => $string_size, '@max' => OS_PAGE_SIZE)), 'error');
      watchdog('nginx_aggregation', 'No CSS aggregation was performed. CSS concatenated string is in excess of %excess for this OS. Resize large_client_header_buffers to @strsize.',
               array('%excess' => $string_size - OS_PAGE_SIZE,
                     '@strsize' => $string_size));
      return FALSE;
    }
    else { // Otherwise build the stylesheet link element.
      $nginx_aggregation_styles = sprintf("<link type=\"text/css\" media=\"%s\" rel=\"stylesheet\" href=\"%s\" />\n", $media_type, $css_media_styles[$media_type]);
    } // else
  } // foreach $css_files
} // nginx_aggregation_concat_css_files

/**
 * Concatenate
 *
 * @param array $javascript
 *   All the JS to be processed in the current scope.
 *
 * @return string
 *   The JS related elements to be inserted in the current page.
 */
function nginx_aggregation_concat_js_files($javascript) {

  if (empty($javascript)) {
    return FALSE;
  }

  // Arrays where the JS files will be stored for later processing.
  $nginx_aggregation_scripts_cache = array();
  $nginx_aggregation_scripts_no_cache = array();
  $nginx_aggregation_scripts_cache_defer = array();
  $nginx_aggregation_scripts_no_cache_defer = array();
  $nginx_aggregation_scripts = array();
  // Inline Javascript.
  $inline_js = '';
  // All JS as a string.
  $scripts = '';

  // For inline Javascript to validate as XHTML, all Javascript containing
  // XHTML needs to be wrapped in CDATA. To make that backwards compatible
  // with HTML 4, we need to comment out the CDATA-tag.
  $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
  $embed_suffix = "\n//--><!]]>\n";

  // Loop over all Javascript.
  foreach ($javascript as $type => $data) {
    if (!$data) {
      continue;
    }
    // Build the inline and settings script tags.
    switch ($type) {
      case 'setting':
        $inline_js .= '<script type="text/javascript">' . $embed_prefix . 'jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $data)) . ");" . $embed_suffix . "</script>\n";
        break;
      case 'inline':
        foreach ($data as $info) {
          $inline_js .= '<script type="text/javascript"' . ($info['defer'] ? ' defer="defer"' : '') . '>' . $embed_prefix . $info['code'] . $embed_suffix . "</script>\n";
        }
        break;
      default:
        foreach ($data as $path => $info) {
          if ($info['cache']) { // Deal with files that can be cached.
            if ($info['defer']) {
              $nginx_aggregation_scripts_cache_defer[] = $path;
            }
            else {
              $nginx_aggregation_scripts_cache[] = $path;
            } // else no defer
          } // cache
          else { // Process files not to be cached.
            if ($info['defer']) {
              $nginx_aggregation_scripts_no_cache_defer[] = $path;
            }
            else {
              $nginx_aggregation_scripts_no_cache[] = $path;
            } // else no defer
          } // else no cache
        } // foreach data
    } // switch
  } // foreach type (module, theme, inline, setting)

  // Now we build the elements.
  if (!empty($nginx_aggregation_scripts_cache)) {
    $nginx_aggregation_scripts['cache'] =
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_cache);
  }
  if (!empty($nginx_aggregation_scripts_cache_defer)) {
    $nginx_aggregation_scripts['defer'] =
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_cache_defer);

  }
  if (!empty($nginx_aggregation_scripts_no_cache)) {
    $nginx_aggregation_scripts['no_cache'] =
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_no_cache);

  }
  if (!empty($nginx_aggregation_scripts_no_cache_defer)) {
    $nginx_aggregation_scripts_['no_cache_defer'] =
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_no_cache_defer);
  }
  // Get the maximum length of the resulting string. Bailout if is greater
  // than the OS page size.
  $string_size = max(array_map('strlen', $nginx_aggregation_scripts));
  if ($string_size > variable_get('nginx_aggregation_max_length', OS_PAGE_SIZE)) {
    drupal_set_message(
      t('Javascript concatenated string is %strsize. Larger then the @max maximum allowed.' ,
        array('%strsize' => $string_size, '@max' => OS_PAGE_SIZE)), 'error');
    watchdog('nginx_aggregation', 'No Javascript aggregation was performed. JavaScript concatenated string is in excess of %excess for this OS. Resize large_client_header_buffers to @strsize.',
             array('%excess' => $string_size - OS_PAGE_SIZE,
                   '@strsize' => $string_size));
    return FALSE;
  }
  else { // Otherwise we build the script element for each case.
    foreach($nginx_aggregation_scripts as $details => $file) {
      switch ($details) {
        case 'no_cache':
          $scripts .= sprintf("<script type=\"text/javascript\" src=\"%s?v=%d\"></script>\n",
                              $file, $_SERVER['REQUEST_TIME']);
          break;
        case 'defer':
          $scripts .= sprintf("<script type=\"text/javascript\" defer=\"defer\" src=\"%s\"></script>\n",
                              $file);
          break;
        case 'no_cache_defer':
          $scripts .= sprintf("<script type=\"text/javascript\" defer=\"defer\" src=\"%s?v=%d\"></script>\n",
                              $file, $_SERVER['REQUEST_TIME']);
          break;
        default:
          $scripts .= sprintf("<script type=\"text/javascript\" src=\"%s\"></script>\n", $file);
      } // switch
    } // foreach
  } // else
  // Return all the JS.
  return $scripts . $inline_js;
} // nginx_aggregation_concat_js_files