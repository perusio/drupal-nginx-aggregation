<?php
/**
 * @file   nginx_aggregation.module
 * @author AntÃ³nio P. P. Almeida <appa@perusio.net>
 * @date   Mon Dec 12 02:08:20 2011
 *
 * @brief Implements JS and CSS file aggregation using Nginx HTTP concat
 *        module.
 */

// The prefix for switching HTTP concatenation on.
define('NGINX_AGGREGATION_PREFIX', '??');

// The OS page size. We try to get it when installing the module on
// hook_install(). If we cannot get it we use this value as a fallback.
define('NGINX_AGGREGATION_OS_PAGE_SIZE', 4096);

// The link to the Nginx HTTP concat module.
define('NGINX_AGGREGATION_URI_NGINX_HTTP_CONCAT', 'https://github.com/perusio/nginx-http-concat');

// The default host for serving the CSS and JS files.
define('NGINX_AGGREGATION_DEFAULT_HOST', $GLOBALS['base_url']);

// The version prefix used to build a query string for avoiding caching.
define('NGINX_AGGREGATION_VERSION_PREFIX', 'v=');

// The values of the replacement flags for the CSS.
define('NGINX_AGGREGATION_CSS_URL_REPLACE', 1);
define('NGINX_AGGREGATION_CSS_IMPORT_REPLACE', 2);

/**
 * Implements hook_help().
 */
function nginx_aggregation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nginx_aggregation':
      return t('Aggregates all CSS and JS files using @nginx_http_concat_module module. Circumvents core aggregation.', array('@nginx_http_concat_module' => l('Nginx HTTP Concat', NGINX_AGGREGATION_URI_NGINX_HTTP_CONCAT)));
  }
} // nginx_aggregation_help

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nginx_aggregation_form_system_performance_settings_alter(&$form, &$form_state) {

  // Add new information to the description of CSS preprocessing.
  $form['bandwidth_optimizations']['preprocess_css']['#description'] .= t('If using Nginx CSS aggregation you should <em>disable</em> this setting.');
  // Check to see if core CSS aggregation is on. If it is signal the user.
  if (variable_get('preprocess_css', 0)) {
    drupal_set_message(t('There is no point in having core CSS aggregation enabled if using Nginx HTTP concat aggregation.'), 'warning');
  }
  // Add new information to the description of CSS preprocessing.
  $form['bandwidth_optimizations']['preprocess_js']['#description'] .= t('If using Nginx JS aggregation you should <em>disable</em> this setting.');
  // Check to see if core JS aggregation is on. If it is signal the user.
  if (variable_get('preprocess_js', 0)) {
    drupal_set_message(t('There is no point in having core JS aggregation enabled if using Nginx HTTP concat aggregation.'), 'warning');
  }
} // nginx_aggregation_form_system_performance_settings_alter

/**
 * Implements hook_theme_registry_alter().
 *
 * Make nginx_aggregation's page preprocess function run last.
 */
function nginx_aggregation_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page'])) {
    // If nginx_aggregation's preprocess function is there already, remove it.
    if (is_array($theme_registry['page']['preprocess functions'])
        &&
        $key = array_search('nginx_aggregation_preprocess_page',
                            $theme_registry['page']['preprocess functions'])) {
      unset($theme_registry['page']['preprocess functions'][$key]);
    }
    // Place it at the end.
    $theme_registry['page']['preprocess functions'][] = 'nginx_aggregation_preprocess_page';
  }
} // nginx_aggregation_theme_registry_alter

/**
 * Implements hook_preprocess_hook().
 *
 * Concatenate all CSS files using Nginx HTTP concat.
 */
function nginx_aggregation_preprocess_page(&$vars) {
  // Only do this for pages that have CSS on them.
  if (!empty($vars['styles'])) {
    // If CSS Optimization is enabled bail out right away.
    if (variable_get('preprocess_css', 0)) {
      break;
    }
    // Otherwise we proceed for aggregation.
    else {
      $nginx_css_agg = nginx_aggregation_concat_css_files($vars['css']);
      // It might happen that we exceed the maximum allowed string size
      if ($nginx_css_agg) {
        $vars['styles'] = $nginx_css_agg;
      }
    }
  } // css done

  // Only do this for pages that have JS on them.
  if (!empty($vars['scripts'])) {
    // If JS Optimization is enabled bail out right away.
    if (variable_get('preprocess_js', 0)) {
      break;
    }
    // Otherwise we proceed for aggregation.
    else { // First we do the header.
      $nginx_js_agg_header = nginx_aggregation_concat_js_files(drupal_add_js(NULL, NULL, 'header'));
      // It might happen that we exceed the maximum allowed string size
      if ($nginx_js_agg_header) {
        $vars['scripts'] = $nginx_js_agg_header;
      }
    }
  } // js done
} // nginx_aggregation_preprocess_page

/**
 * Implements theme_closure().
 *
 * Concatenate all Javascript in the footer.
 */
function phptemplate_closure($main = 0) {
  // Grab all hook_footer() stuff.
  $footer = module_invoke_all('footer', $main);
  // Perform the concatenation.
  $nginx_js_agg_footer = nginx_aggregation_concat_js_files(drupal_add_js(NULL, NULL, 'footer'));
  // If were successful add the JS to the footer.
  if ($nginx_js_agg_footer) {
    return implode("\n", $footer) . $nginx_js_agg_footer;
  }
} // phptemplate_closure

/**
 * Builds the string with all the CSS files to be added to a given page.
 *
 * @param array $css_files
 *   The array of CSS files.
 *
 * @return string or boolean
 *   The string with all the CSS to be added for each media type or FALSE if
 *   we go beyond the maximum allowed string size.
 */
function nginx_aggregation_concat_css_files($css_files) {

  if (empty($css_files)) {
    return FALSE;
  }
  // The string with all the external styles.
  $nginx_aggregation_styles = '';
  // The string with all the internal styles.
  $internal_css = '';
  // Inline CSS stylesheets.
  $internal_styles = array();
  // The external CSS stylesheets.
  $external_styles = array();
  // Number of concatenated CSS files.
  $nbr_concatenated_css = 0;
  // Loop over all matched file URIs.
  foreach($css_files as $media_type => $context_array) {
    $external_styles[$media_type] = '';
    $internal_styles[$media_type] = '';
    $internal_types_styles = array();
    $external_types_styles = array();
    foreach ($context_array as $file => $css) {
      $css_files = array_keys($css);
      $n = count($css_files);
      // Loop over all CSS files.
      for($i = 0; $i < $n; $i++) {
        $file = $css_files[$i];
      file_processing: // Label this for the goto.
        $css_replace = 0;
        // If there's a url() replace the argument to an absolute path and
        // add it to the array of stylesheets to be internal.
        if (strpos($buffer, 'url(') !== FALSE) {
          $css_replace = NGINX_AGGREGATION_CSS_URL_REPLACE;
        }
        // Replace all @import declarations with an inclusion.
        if (strpos($buffer, '@import') !== FALSE) {
          $css_replace |= NGINX_AGGREGATION_CSS_IMPORT_REPLACE;
        }
        switch ($css_replace) {
          case NGINX_AGGREGATION_CSS_URL_REPLACE:
            // TODO regex replace or data URIs.
            $internal_types_styles[] = $buffer;
            break;
          case NGINX_AGGREGATION_CSS_IMPORT_REPLACE:
            // TODO regex replace.
            // $file = grab file from regex
            // goto file_processing;
            $internal_types_styles[] = $buffer;
            break;
          default:
            // Otherwise add to the external.
            $external_types_styles[] = $file;
            $nbr_concatenated_css++;
        } // switch
      } // for
    } // inner foreach
    // Implode the array so that we get a proper comma separated string of
    // file names.
    $external_styles[$media_type] .=
      variable_get('nginx_aggregation_host', NGINX_AGGREGATION_DEFAULT_HOST) . base_path() . NGINX_AGGREGATION_PREFIX . implode(',', $external_types_styles);
    $internal_styles[$media_type] .= implode("\n", $internal_types_styles);
    // Get the maximum length of the resulting string. Bailout if is greater
    // than the OS page size.
    $string_size = strlen($external_styles[$media_type]);
    if ($string_size > variable_get('nginx_aggregation_max_length', NGINX_AGGREGATION_OS_PAGE_SIZE)) {
      drupal_set_message(
        t('CSS concatenated string is %strsize. Larger then the @max maximum allowed.' ,
          array('%strsize' => $string_size, '@max' => NGINX_AGGREGATION_OS_PAGE_SIZE)), 'error');
      watchdog('nginx_agg', 'No CSS aggregation was performed. CSS concatenated string is in excess of %excess for this OS. Resize large_client_header_buffers to @strsize.',
               array('%excess' => $string_size - NGINX_AGGREGATION_OS_PAGE_SIZE,
                     '@strsize' => $string_size), WATCHDOG_ERROR);
      return FALSE;
    } // if
    else { // Otherwise build the stylesheet link element.
      if ($string_size > 0) {
        $nginx_aggregation_styles .=
          sprintf("<link type=\"text/css\" media=\"%s\" rel=\"stylesheet\" href=\"%s\" />\n",
                  $media_type, $external_styles[$media_type]);
      } // else
      // Get the internal CSS to be present on the page.
      if (!empty($internal_styles[$media_type])) {
        $internal_css .= sprintf("<style type=\"text/css\" media=%s>\n%s</style>",
                                 $media_type, $internal_styles[$media_type]);
      } // if
    } // else
  } // outer foreach ($css_files)

  // Log to watchdog the number of concatenated files.
  watchdog('nginx_agg', 'Concatenated %number CSS files.',
           array('%number' => $nbr_concatenated_css));
  // Return the result.
  return $internal_css . $nginx_aggregation_styles;
} // nginx_aggregation_concat_css_files

/**
 * Concatenate all JS files and create the string with all that is to be
 * inline.
 *
 * @param array $javascript
 *   All the JS to be processed in the current scope.
 *
 * @return string
 *   The JS related elements to be inserted in the current page.
 */
function nginx_aggregation_concat_js_files($javascript) {

  if (empty($javascript)) {
    return FALSE;
  }
  // Arrays where the JS files will be stored for later processing.
  $nginx_aggregation_scripts_cache = array();
  $nginx_aggregation_scripts_no_cache = array();
  $nginx_aggregation_scripts_cache_defer = array();
  $nginx_aggregation_scripts_no_cache_defer = array();
  $nginx_aggregation_scripts = array();
  // Inline Javascript.
  $inline_js = '';
  // All JS as a string.
  $scripts = '';
  // For inline Javascript to validate as XHTML, all Javascript containing
  // XHTML needs to be wrapped in CDATA. To make that backwards compatible
  // with HTML 4, we need to comment out the CDATA-tag.
  $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
  $embed_suffix = "\n//--><!]]>\n";

  // The number if concatenated files for each case.
  $nbr_concatenated_js = 0;
  $nbr_concatenated_js_defer = 0;
  $nbr_concatenated_js_no_cache = 0;
  $nbr_concatenated_js_no_cache_defer = 0;
  // Loop over all Javascript.
  foreach ($javascript as $type => $data) {
    if (!$data) {
      continue;
    }
    // Build the inline and settings script tags.
    switch ($type) {
      case 'setting':
        $inline_js .= '<script type="text/javascript">' . $embed_prefix . 'jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $data)) . ");" . $embed_suffix . "</script>\n";
        break;
      case 'inline':
        foreach ($data as $info) {
          $inline_js .= '<script type="text/javascript"' . ($info['defer'] ? ' defer="defer"' : '') . '>' . $embed_prefix . $info['code'] . $embed_suffix . "</script>\n";
        }
        break;
      default:
        foreach ($data as $path => $info) {
          if ($info['cache']) { // Deal with files that can be cached.
            if ($info['defer']) {
              $nginx_aggregation_scripts_cache_defer[] = $path;
              $nbr_concatenated_js_defer++;
            }
            else {
              $nginx_aggregation_scripts_cache[] = $path;
              $nbr_concatenated_js++;
            } // else no defer
          } // cache
          else { // Process files not to be cached.
            if ($info['defer']) {
              $nginx_aggregation_scripts_no_cache_defer[] = $path;
              $nbr_concatenated_js_no_cache_defer++;
            }
            else {
              $nginx_aggregation_scripts_no_cache[] = $path;
              $nbr_concatenated_js_no_cache++;
            } // else no defer
          } // else no cache
        } // foreach data
    } // switch
  } // foreach type (module, theme, inline, setting)

  // Now we build the elements.
  if (!empty($nginx_aggregation_scripts_cache)) {
    $nginx_aggregation_scripts['cache'] =
      variable_get('nginx_aggregation_host', NGINX_AGGREGATION_DEFAULT_HOST) . base_path() .
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_cache);
  }
  if (!empty($nginx_aggregation_scripts_cache_defer)) {
    $nginx_aggregation_scripts['defer'] =
      variable_get('nginx_aggregation_host', NGINX_AGGREGATION_DEFAULT_HOST) . base_path() .
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_cache_defer);
  }
  if (!empty($nginx_aggregation_scripts_no_cache)) {
    $nginx_aggregation_scripts['no_cache'] =
      variable_get('nginx_aggregation_host', NGINX_AGGREGATION_DEFAULT_HOST) . base_path() .
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_no_cache);
  }
  if (!empty($nginx_aggregation_scripts_no_cache_defer)) {
    $nginx_aggregation_scripts_['no_cache_defer'] =
      variable_get('nginx_aggregation_host', NGINX_AGGREGATION_DEFAULT_HOST) . base_path() .
      NGINX_AGGREGATION_PREFIX . implode(',', $nginx_aggregation_scripts_no_cache_defer);
  }
  // Get the maximum length of the resulting string. Bailout if is greater
  // than the OS page size.
  $string_size = max(array_map('strlen', $nginx_aggregation_scripts));
  if ($string_size > variable_get('nginx_aggregation_max_length', NGINX_AGGREGATION_OS_PAGE_SIZE)) {
    drupal_set_message(
      t('Javascript concatenated string is %strsize. Larger then the @max maximum allowed.' ,
        array('%strsize' => $string_size, '@max' => NGINX_AGGREGATION_OS_PAGE_SIZE)), 'error');
    watchdog('nginx_agg', 'No Javascript aggregation was performed. JavaScript concatenated string is in excess of %excess for this OS. Resize large_client_header_buffers to @strsize.',
             array('%excess' => $string_size - NGINX_AGGREGATION_OS_PAGE_SIZE,
                   '@strsize' => $string_size), WATCHDOG_ERROR);
    return FALSE;
  }
  else { // Otherwise we build the script element for each case.
    foreach($nginx_aggregation_scripts as $details => $file) {
      switch ($details) {
        case 'no_cache':
          $scripts .= sprintf("<script type=\"text/javascript\" src=\"%s?v=%d\"></script>\n",
                              $file, $_SERVER['REQUEST_TIME']);
          break;
        case 'defer':
          $scripts .= sprintf("<script type=\"text/javascript\" defer=\"defer\" src=\"%s\"></script>\n",
                              $file);
          break;
        case 'no_cache_defer':
          $scripts .= sprintf("<script type=\"text/javascript\" defer=\"defer\" src=\"%s?%s%d\"></script>\n",
                              $file, NGINX_AGGREGATION_VERSION_PREFIX, $_SERVER['REQUEST_TIME']);
          break;
        default:
          $scripts .= sprintf("<script type=\"text/javascript\" src=\"%s\"></script>\n", $file);
      } // switch
    } // foreach
  } // else
  // Log to watchdog the number of concatenated files.
  watchdog('nginx_agg', 'Concatenated %number JS files.',
           array('%number' => max($nbr_concatenated_js, $nbr_concatenated_js_defer,
                                  $nbr_concatenated_js_no_cache, $nbr_concatenated_js_no_cache_defer)));
  // Return all the JS.
  return $scripts . $inline_js;
} // nginx_aggregation_concat_js_files